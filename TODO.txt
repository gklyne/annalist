# Explorations


## Web application

1. Front page/initial display
   / form elements to create new collection
   / form elements to delete collection
   / include supporting logic in Collection module
   / rework authentication/authorization to allow unauthenticated access for public data 
   - test cases for site, collection, site views
   - move util.py to utils package, and rename
2. Collection initial display
   - determine base configuration/metadata needed
   - include supporting logic in Collection module
   - form elements to add/delete types/views/lists/...
   - test cases
3. Collection configuration
4. ...
5. Misc
   - Login link to include option to redirect to failed page, with form fields populated
   - Complete authorization framework, per collection
   - can "Confirm" form continue to a DELETE operation?  Can forms reliably do this?  
     Use server-internal revectoring?  What about delete multiple?
   - view collections doesn't use entered label - problem with entry vocab?
   - util.write_entity: think about capturing provenance metadata too.

AnalistGenericView:
- Generic renderers, all driven by a supplied dictionary:
  - HTML
  - JSON-LD
  - uri-list

Deployment: look into using Vagrant and/or Puppet


## Dynamic form interface







## Authorization

* Assume use of annalist form data under control of suitable authority
* Focus on form of authorization data
* Back-fit to form interface for creation of data; figure what seeding is needed

