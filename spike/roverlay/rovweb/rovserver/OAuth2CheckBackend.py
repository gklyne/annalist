"""
Authentication backend using Credential object returned by oauth2client flow exchange
"""

__author__      = "Graham Klyne (GK@ACM.ORG)"
__copyright__   = "Copyright 2011-2013, Graham Klyne"
__license__     = "MIT (http://opensource.org/licenses/MIT)"

import json
import copy

import httplib2

from oauth2client.client import OAuth2WebServerFlow

from django.contrib.auth.models import User

OAuth2WebServerFlow_strip = (
    "step1_get_authorize_url",
    "step2_exchange"
    )

def object_to_dict(obj, strip):
    """Utility function that creates dictionary representation of an object.

    Args:
        strip: array, An array of names of members to not include in the dict.

    Returns:
        dictionary, with non-excluded values that can be used to reconstruct an instance
        of the object via its constructor (assuming an appropriate constructor form, as
        used below for dict_to_flow)
    """
    t = type(obj)
    d = copy.copy(obj.__dict__)
    for member in strip:
      if member in d:
        del d[member]
    d['_class'] = t.__name__
    d['_module'] = t.__module__
    return d

def flow_to_dict(f):
    return object_to_dict(f, OAuth2WebServerFlow_strip) 

def dict_to_flow(d):
    """
    Constructs a OAuth2WebServerFlow object from a dictionary previously created
    by flow_to_dict.

    Args:
        d:  dict, generated by object_to_dict
    """
    flow = OAuth2WebServerFlow(
        d['client_id'], d['client_secret'], d['scope'],
        redirect_uri=d['redirect_uri'], 
        user_agent=d['user_agent'],
        auth_uri=d['auth_uri'], 
        token_uri=d['token_uri'],
        revoke_uri=d['revoke_uri'],
        **d['params']
        )
    return flow


    # self.client_id = client_id
    # self.client_secret = client_secret
    # self.scope = util.scopes_to_string(scope)
    # self.redirect_uri = redirect_uri
    # self.user_agent = user_agent
    # self.auth_uri = auth_uri
    # self.token_uri = token_uri
    # self.revoke_uri = revoke_uri
    # self.params = {
    #     'access_type': 'offline',
    #     'response_type': 'code',
    # }



class OAuth2CheckBackend(object):
    """
    Authenticate using credential object from OAuth2 exchange

    username is a local user id that keys the local user database
    password is a Credential object obtained via the OAuth2 dance
    profile_uri is a URI from which user profile imnformation is retrieved
    """
    def authenticate(self, username=None, password=None, profile_uri=None):
        if username and password and not password.invalid:
            save_required = False
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                # Create a new user. Note that we can set password
                # to anything, because it won't be checked.
                user = User(username=username, password='Not specified')
                user.is_staff = True
                user.is_superuser = False
                save_required = True
            if profile_uri:
                # Use access token to retrieve profile information
                http = httplib2.Http()
                http = password.authorize(http)
                (resp, data) = http.request(profile_uri, method="GET")
                status   = resp.status
                reason   = resp.reason
                assert status == 200, "status: %03d, reason %s"%(status, reason)
                if status == 200:
                    # Extract and save user profile details
                    profile = json.loads(data)
                    user.first_name = profile['given_name']
                    user.last_name  = profile['family_name']
                    user.email      = profile['email']
                    save_required = True
            if save_required: user.save()
            return user
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
