from __future__ import unicode_literals
from __future__ import absolute_import, division, print_function

"""
Tests for zzzzzz field rendering
"""

__author__      = "Graham Klyne (GK@ACM.ORG)"
__copyright__   = "Copyright 2014, G. Klyne"
__license__     = "MIT (http://opensource.org/licenses/MIT)"

import sys
import os
import unittest
# import re
# from collections import OrderedDict

import logging
log = logging.getLogger(__name__)

# from django.conf                                import settings
# from django.test                                import TestCase # cf. https://docs.djangoproject.com/en/dev/topics/testing/tools/#assertions
# from django.template                            import Context, Template, loader

from annalist.views.fields.render_zzzzzz import (
    get_zzzzzz_renderer, 
    ZzzzzzValueMapper
    )

from .field_rendering_support import FieldRendererTestSupport
from .AnnalistTestCase import AnnalistTestCase
from .tests import (
    TestHost, TestHostUri, TestBasePath, TestBaseUri, TestBaseDir
    )
from .init_tests import (
    init_annalist_test_site, 
    init_annalist_test_coll,
    init_annalist_named_test_coll,
    resetSitedata
    )

#   -----------------------------------------------------------------------------
#
#   ZZZZZZ rendering tests
#
#   -----------------------------------------------------------------------------

class ZzzzzzRenderingTest(FieldRendererTestSupport):
    """
    Tests for Site object interface
    """

    def setUp(self):
        return

    def tearDown(self):
        return

    def test_RenderZzzzzzValue(self):
        def expect_render(val):
            render_view = "..."
            render_edit = "..."
            return {'view': render_view, 'edit': render_edit}
        test_value_context_renders = (
            [ (make_test_context(None),    expect_render("???"))
            , (make_test_context("???"),   expect_render("???"))
            ])
        renderer = get_zzzzzz_renderer()
        for render_context, expect_render in value_context_renders:
            self._check_value_renderer_results(
                renderer,
                context=render_context,
                expect_rendered_view=expect_render['view'],
                expect_rendered_edit=expect_render['edit']
                )
        return

    def test_DecodeZzzzzzValue(self):
        test_decode_values = (
            { None:     "???"
            , "???":    "???"
            })
        for valtest, expect_valdata in test_decode_values.items():
            valdata = ZzzzzzValueMapper.decode(valtext)
            self.assertEqual(
                valdata, expect_valdata, 
                "Value decode(%s) = %r, expect %r"%(valtext,valdata, expect_valdata)
                )
        return

# End.

if __name__ == "__main__":
    # import django
    # django.setup()  # Needed for template loader
    # Runtests in this module
    # runner = unittest.TextTestRunner(verbosity=2)
    # tests = unittest.TestSuite()
    # tests  = getSuite(select=sel)
    # if tests: runner.run(tests)
    unittest.main()
