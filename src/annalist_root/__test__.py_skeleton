from __future__ import unicode_literals
from __future__ import absolute_import, division, print_function

"""
Tests for ... @@module description@@
"""

__author__      = "Graham Klyne (GK@ACM.ORG)"
__copyright__   = "Copyright 2016, G. Klyne"
__license__     = "MIT (http://opensource.org/licenses/MIT)"

import os
import unittest

import logging
log = logging.getLogger(__name__)

from django.conf                import settings
from django.contrib.auth.models import User
from django.test                import TestCase
from django.test.client         import Client

# from bs4                        import BeautifulSoup

# from miscutils.MockHttpResources import MockHttpFileResources, MockHttpDictResources

from annalist.identifiers       import ANNAL
from annalist.models.entity     import EntityRoot, Entity

from tests                      import TestBaseUri, TestBaseDir, dict_to_str, init_annalist_test_site
from AnnalistTestCase           import AnnalistTestCase

# Test assertion summary from http://docs.python.org/2/library/unittest.html#test-cases
#
# Method                    Checks that             New in
# assertEqual(a, b)         a == b   
# assertNotEqual(a, b)      a != b   
# assertTrue(x)             bool(x) is True  
# assertFalse(x)            bool(x) is False     
# assertIs(a, b)            a is b                  2.7
# assertIsNot(a, b)         a is not b              2.7
# assertIsNone(x)           x is None               2.7
# assertIsNotNone(x)        x is not None           2.7
# assertIn(a, b)            a in b                  2.7
# assertNotIn(a, b)         a not in b              2.7
# assertIsInstance(a, b)    isinstance(a, b)        2.7
# assertNotIsInstance(a, b) not isinstance(a, b)    2.7
#
# From AnnalistTestCase:
# self.assertMatch(string, pattern, msg=None)
# self.assertDictionaryMatch(actual_dict, expect_dict, prefix="")


#   -----------------------------------------------------------------------------
#
#   @@stuff@@ tests
#
#   -----------------------------------------------------------------------------

class EntityRootTest(AnnalistTestCase):
    """
    Tests for @@stuff@@
    """

    def setUp(self):
        init_annalist_test_site()
        return

    def tearDown(self):
        return

    def test_ZZZZZZ(self):
        self.assertEqual(ZZZZZZ.__name__, "ZZZZZZ", "Check class name")
        return

# End.
